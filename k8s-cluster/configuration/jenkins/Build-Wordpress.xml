<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>A job that builds the WordPress source code from a local GitLab repository and publishes the resulting build to a Nexus repository</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.9">
      <gitLabConnection>gitlab</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_REPO_URL</name>
          <description>URL of your private Docker repository where Jenkins slave and custom WordPress containers are pulled from. Enter the URL in the following format: {{NEXUS_IP_ADDRESS}}:{{DOCKER_REGISTRY_PORT}}</description>
          <defaultValue>{{NEXUS_IP_ADDRESS}}:{{DOCKER_REGISTRY_PORT}}</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO_URL</name>
          <description>Enter the URL of your Git repository in the following format: http://{{GITLAB_IP_ADDRESS}}:{{GITLAB_PORT}}/root/wordpress-develop.git</description>
          <defaultValue>http://{{GITLAB_IP_ADDRESS}}:{{GITLAB_PORT}}/root/wordpress-develop.git</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NEXUS_URL</name>
          <description>Please enter the Sonatype Nexus URL. For e.g. {{NEXUS_IP_ADDRESS}}:{{NEXUS_PORT}}</description>
          <defaultValue>{{NEXUS_IP_ADDRESS}}:{{NEXUS_PORT}}</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_CREDENTIALS_USER</name>
          <description>Name of the credentials user to use to authenticate with the Git repository</description>
          <defaultValue>git-user</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.5.9">
          <spec></spec>
          <triggerOnPush>true</triggerOnPush>
          <triggerOnMergeRequest>true</triggerOnMergeRequest>
          <triggerOnPipelineEvent>false</triggerOnPipelineEvent>
          <triggerOnAcceptedMergeRequest>false</triggerOnAcceptedMergeRequest>
          <triggerOnClosedMergeRequest>false</triggerOnClosedMergeRequest>
          <triggerOnApprovedMergeRequest>true</triggerOnApprovedMergeRequest>
          <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
          <triggerOnNoteRequest>true</triggerOnNoteRequest>
          <noteRegex>Jenkins please retry a build</noteRegex>
          <ciSkip>true</ciSkip>
          <skipWorkInProgressMergeRequest>true</skipWorkInProgressMergeRequest>
          <setBuildDescription>true</setBuildDescription>
          <branchFilterType>All</branchFilterType>
          <includeBranchesSpec></includeBranchesSpec>
          <excludeBranchesSpec></excludeBranchesSpec>
          <targetBranchRegex></targetBranchRegex>
          <secretToken>{{SECRET_TOKEN}}</secretToken>
          <pendingBuildName></pendingBuildName>
          <cancelPendingBuildsOnUpdate>false</cancelPendingBuildsOnUpdate>
        </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57">
    <script>def label = &quot;purepod-${UUID.randomUUID().toString()}&quot;
def DOCKER_REPO_URL = &quot;${params.DOCKER_REPO_URL}&quot;
def GIT_REPO_URL = &quot;${params.GIT_REPO_URL}&quot;
def GIT_CREDENTIALS_USER = &quot;${params.GIT_CREDENTIALS_USER}&quot;
def NEXUS_URL = &quot;${params.NEXUS_URL}&quot;

// Create pod template using desired image.
podTemplate(label: label, containers: [
        containerTemplate(name: &apos;jnlp&apos;, image: DOCKER_REPO_URL + &apos;/jnlp-slave-sudo&apos;, alwaysPullImage: true, args: &apos;${computer.jnlpmac} ${computer.name}&apos;, workingDir: &apos;/home/jenkins/dev-jenkins&apos;),
        containerTemplate(name: &apos;buildwordpress&apos;, image: DOCKER_REPO_URL + &apos;/build-wordpress&apos;, workingDir: &apos;/home/jenkins/dev-jenkins&apos;, ttyEnabled: true, command: &apos;cat&apos;)],
    //mounting the Pure Storage FlashBlade volume on pod
    volumes: [
        persistentVolumeClaim(mountPath: &apos;/home/jenkins/dev-jenkins/workspace/&apos; + env.JOB_NAME, claimName: &apos;fb-jenkins-slave&apos;, readOnly: false)
        //persistentVolumeClaim(mountPath: &apos;/home/jenkins/dev-jenkins&apos;  + env.JOB_NAME, claimName: &apos;fb-jenkins-slave&apos;, readOnly: false)
        ],
    imagePullSecrets: [ &apos;jenkins-pull&apos; ]) 
    
    {
    node(label) {
    container(&apos;buildwordpress&apos;) {
            // Git clone source code.
            stage(&apos;Clone Repository&apos;) {
                dir(env.BUILD_NUMBER + &apos;/build&apos;) {
                git branch: &apos;master&apos;, credentialsId: GIT_CREDENTIALS_USER, url: GIT_REPO_URL
                }
                    
            }
            // Install dependancies and build project.
            stage(&apos;Build project&apos;) {
                dir(env.BUILD_NUMBER + &apos;/build&apos;) {
                    sh &quot;npm install&quot;
                    sh &quot;grunt build&quot;
                }
            }
            // Run QUnit test cases
            stage(&apos;Run Unit Tests&apos;) {
                dir(env.BUILD_NUMBER + &apos;/build&apos;) {
                    sh &quot;grunt qunit:reports --force&quot;
                }
            }
            // Create tar.gz package
            stage(&apos;Create Package&apos;) {
                dir(env.BUILD_NUMBER + &apos;/build&apos;) {
                    sh &quot;mkdir wordpress&quot; 
                    sh &quot;cp -rf build/* wordpress/&quot;
                    sh &quot;tar -czvf wordpress.tar.gz wordpress/&quot;
                }
            }
            stage(&apos;Add to Nexus artifacts&apos;) {
                dir(env.BUILD_NUMBER + &apos;/build&apos;) {
                    nexusArtifactUploader artifacts: [[artifactId: &apos;wordpress-package&apos;, classifier: &apos;&apos;, file: &apos;wordpress.tar.gz&apos;, type: &apos;tar.gz&apos;]], credentialsId: &apos;nexus&apos;, groupId: &apos;&apos;, nexusUrl: NEXUS_URL, nexusVersion: &apos;nexus3&apos;, protocol: &apos;http&apos;, repository: &apos;builds-store&apos;, version: &apos;1.0.0.&apos;+env.BUILD_NUMBER
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <authToken>115424d811ca142053b10c17707fd1e60d</authToken>
  <disabled>false</disabled>
</flow-definition>
