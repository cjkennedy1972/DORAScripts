<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>A job that deploys a the resulting build of the WordPress source code to a Virtual Machine on VMWare</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.9">
      <gitLabConnection>gitlab</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>WP_BUILD_NUMBER</name>
          <description>WordPress build number from CI stage</description>
          <defaultValue>1</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NO_OF_VMS</name>
          <description>Number of VMs</description>
          <defaultValue>2</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_REPO_URL</name>
          <description>Enter the URL of your Git repository in the following format: http://{{GITLAB_IP_ADDRESS}}:{{GITLAB_PORT}}/root/wordpress-cd.git</description>
          <defaultValue>http://{{GITLAB_IP_ADDRESS}}:{{GITLAB_PORT}}/root/wordpress-cd.git</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NEXUS_URL</name>
          <description>Enter the URL of your Sonatype Nexus server in the following format: {{NEXUS_IP_ADDRESS}}:{{NEXUS_PORT}}</description>
          <defaultValue>{{NEXUS_IP_ADDRESS}}:{{NEXUS_PORT}}</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_REPO_URL</name>
          <description>URL of your private Docker repository where Jenkins slave and custom WordPress containers are pulled from. Enter the URL in the following format: {{NEXUS_IP_ADDRESS}}:{{DOCKER_REGISTRY_PORT}}</description>
          <defaultValue>{{NEXUS_IP_ADDRESS}}:{{DOCKER_REGISTRY_PORT}}</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_CREDENTIALS_USER</name>
          <description>Name of the credentials user to use to authenticate with the Git repository</description>
          <defaultValue>git-user</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57">
    <script>def label = &quot;mypod-${UUID.randomUUID().toString()}&quot;
def DOCKER_URL = &quot;${params.DOCKER_REPO_URL}&quot;
def GITLAB_URL = &quot;${params.GITLAB_URL}&quot;
def NEXUS_URL = &quot;${params.NEXUS_URL}&quot;
def GIT_CREDENTIALS_USER = &quot;${params.GIT_CREDENTIALS_USER}&quot;
def WP_BUILD_NUMBER = &quot;${params.WP_BUILD_NUMBER}&quot;

def VSPHERE_HOST = &apos;{{VSPHERE_HOST}}&apos;
def VSPHERE_RESOURCE = &apos;{{VSPHERE_RESOURCE}}&apos;
def VM_TEMPLATE = &apos;{{VM_TEMPLATE}}&apos;
def VSPHERE_USER = &apos;{{VSPHERE_USER}}&apos;
def VSPHERE_PASSWORD = &apos;{{VSPHERE_PASSWORD}}&apos;
def VM_MEMORY = {{VM_MEMORY}}
def VM_CPU = {{VM_CPU}}
def VM_COUNT = &quot;${params.NO_OF_VMS}&quot;


def yamlPodDefinition = &quot;&quot;&quot;
apiVersion: v1
kind: Pod
metadata:
  generateName: agent-k8s-
  labels:
    name: jnlp
    label: jnlp
spec:
  securityContext:
    runAsUser: 1000
  containers:
  - name: jnlp
    #image: &quot;&quot;&quot; + DOCKER_REPO_URL + &quot;&quot;&quot;/jnlp-slave-sudo 
    image: jenkins/jnlp-slave
    workingDir: /home/jenkins
    tty: true
    securityContext:
      runAsUser: 0
      privileged: true
      #runAsUser: 2000
      #allowPrivilegeEscalation: false
    volumeMounts:
      - 
        mountPath: /home/jenkins
        name: pure-volume
        readOnly: false
  - name: wordpress-cd
    image: &quot;&quot;&quot; + DOCKER_REPO_URL + &quot;&quot;&quot;/purestorage/vagrant:latest
    imagePullPolicy: IfNotPresent
    #workingDir: /home/jenkins/workspace/&quot;&quot;&quot; + env.JOB_NAME + &quot;&quot;&quot;
    workingDir: /home/jenkins
    command: 
    - cat
    volumeMounts:
      - 
        mountPath: /home/jenkins
        name: pure-volume
        readOnly: false
    tty: true
    securityContext:
      runAsUser: 0
      privileged: true
  volumes:
    - name: pure-volume
      persistentVolumeClaim:
        claimName: fb-jenkins-slave
  imagePullSecrets:
  - name: jenkins-pull
&quot;&quot;&quot;

// Create pod template using desired image.


podTemplate(label: label, yaml: yamlPodDefinition) {
// Create pod template using desired image.
//podTemplate(label: label, containers: [
//    containerTemplate(name: &apos;jnlp&apos;, image: DOCKER_URL + &apos;/jnlp-slave-sudo&apos;, alwaysPullImage: true, args: &apos;${computer.jnlpmac} ${computer.name}&apos;, workingDir: &apos;/home/jenkins/dev-jenkins&apos;),
//    containerTemplate(name: &apos;wordpress-cd&apos;, image: DOCKER_URL + &apos;/purestorage/vagrant:latest&apos;, alwaysPullImage: true, workingDir: &apos;/home/jenkins/dev-jenkins&apos;,  ttyEnabled: true, command: &apos;cat&apos;)
//    ], 
//    
    //mounting the Pure Storage FlashBlade volume on pod
//    volumes: [
//    persistentVolumeClaim(mountPath: &apos;/home/jenkins/dev-jenkins/workspace/&apos; + env.JOB_NAME, claimName: &apos;fb-jenkins-slave&apos;, readOnly: false)
//    ],
//    imagePullSecrets: [ &apos;jenkins-pull&apos; ]) {
    node(label) {
        //Installing the vagrant plugin on container
        container(&apos;wordpress-cd&apos;){
            println &apos;Stage 2 - CD&apos;
            dir(env.BUILD_NUMBER + &apos;/build&apos;) {

                if ((env.BUILD_ID.toInteger() % {{MASTER_BUILD_NO}}) == 0) {
                    //cloning the stage-cd repo having vagrantfile and bootstrap script                
                    stage(&apos;Clone Repository&apos;) {
                       git branch: &apos;master&apos;, credentialsId: GIT_CREDENTIALS_USER , url: GIT_REPO_URL
                    }
                    
                   
                    sh &apos;vagrant plugin install vagrant-vsphere &gt; /dev/null&apos;
                    
                    dir(&apos;stage-2&apos;){
                         stage(&apos;Launch VM&apos;) {
                            sh &quot;sed -i &apos;s/@@BUILD_NUMBER@@/${BUILD_NUMBER}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_HOST@@/${VSPHERE_HOST}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_RESOURCE@@/${VSPHERE_RESOURCE}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VM_TEMPLATE@@/${VM_TEMPLATE}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_USER@@/${VSPHERE_USER}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_PASSWORD@@/${VSPHERE_PASSWORD}/g&apos; Vagrantfile&quot;

                            sh &quot;sed -i &apos;s/@@NEXUS_URL@@/${NEXUS_URL}/g&apos; upgrade-wp.sh&quot;
                            sh &quot;sed -i &apos;s/@@WP_BUILD_NUMBER@@/${WP_BUILD_NUMBER}/g&apos; upgrade-wp.sh&quot;

                            //sh &apos;cat Vagrantfile&apos;
                            //sh &apos;cat upgrade-wp.sh&apos;    

                            sh &apos;vagrant up --provider=vsphere&apos;
                        }
                    }

                    
                    dir(&apos;stage-3&apos;) {
                        stage(&apos;Clone Stage 2 VM and Execute Queries&apos;) {
                            sh &quot;sed -i &apos;s/@@BUILD_NUMBER@@/${BUILD_NUMBER}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_HOST@@/${VSPHERE_HOST}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_RESOURCE@@/${VSPHERE_RESOURCE}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VM_TEMPLATE@@/${VM_TEMPLATE}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_USER@@/${VSPHERE_USER}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VSPHERE_PASSWORD@@/${VSPHERE_PASSWORD}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VM_MEMORY@@/${VM_MEMORY}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VM_CPU@@/${VM_CPU}/g&apos; Vagrantfile&quot;
                            sh &quot;sed -i &apos;s/@@VM_COUNT@@/${VM_COUNT}/g&apos; Vagrantfile&quot;

                            sh &apos;cat Vagrantfile&apos;

                            sh &apos;vagrant up --provider=vsphere&apos;
                        }
                    }
                    stage (&apos;Trigger HA-Proxy-Deployment job&apos;) {
                        build job: &apos;HA-Proxy-Deployment&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;WP_CD_BUILD_NUMBER&apos;, value: env.BUILD_NUMBER]],  wait: false
                    }
                    
        
                } else {
                    echo &apos;WordPress CD Stage will not be trigged as this is not a GOLD build&apos;
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>