def label = "mypod-${UUID.randomUUID().toString()}"
def databaseUsername = 'root'
def databasePassword = 'root'
def databaseName = 'DS3'
def databaseHost = 'mysql-service-${BUILD_NUMBER}'
def jdbcUrl = "jdbc:mysql://$databaseHost/$databaseName".toString()
podTemplate(label: label, containers: [
        containerTemplate(name: 'jnlp', image: '10.21.236.86:5000/jnlp-slave-sudo:1.0', alwaysPullImage: true, args: '${computer.jnlpmac} ${computer.name}', workingDir: '/home/jenkins/dev-jenkins/dvd-store/'+env.BUILD_NUMBER, 
                        livenessProbe: containerLivenessProbe( execArgs: 'ls', initialDelaySeconds: 30, timeoutSeconds: 10, failureThreshold: 6, periodSeconds: 10, successThreshold: 1)),
        containerTemplate(name: "mysql",image: '10.21.236.86:5000/mysql:v1', alwaysPullImage: true, workingDir: '/home/jenkins/dev-jenkins/dvd-store/'+env.BUILD_NUMBER,ttyEnabled: true, command: 'cat',
                        envVars: [
                                envVar(key: 'MYSQL_DATABASE', value: databaseName),
                                envVar(key: 'MYSQL_USER', value: databaseUsername),
                                envVar(key: 'MYSQL_PASSWORD', value: databasePassword),
                                envVar(key: 'MYSQL_ROOT_PASSWORD', value: databasePassword)
                        ],
                        livenessProbe: containerLivenessProbe( execArgs: 'ls', initialDelaySeconds: 30, timeoutSeconds: 10, failureThreshold: 6, periodSeconds: 10, successThreshold: 1))
        ],
    volumes: [
        persistentVolumeClaim(mountPath: '/home/jenkins/dev-jenkins', claimName: 'dev-jenkins', readOnly: false)],
        
        imagePullSecrets: [ 'myregistrykey' ])

  {
    node(label) {
            container('mysql') {
               
                 //org.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=3800
                
             // Git clone source code.
                stage('Clone Repository') {
                    git branch: 'master', credentialsId: '4063a731-7121-487c-918c-93c2f103d1c7', url: 'http://ps-gitlab-gitlab-ce.dev:8080/root/DORAScripts'
                }
                    
                
                // Install dependancies and build project.
                stage('Build project') {
                   
                    KUBECONFIG = "/home/jenkins/dev-jenkins/dvd-store/" + env.BUILD_NUMBER + "/workspace/dorascript-dvd-store/Mysql-DVD-Store/k8s-files/config"
                    sh "kubectl version"
                   
                    dir("Mysql-DVD-Store/k8s-files"){
                        //sh "kubectl config --kubeconfig=${KUBECONFIG} view"
                       
                        sh "sed -i 's/fb-mysql-pv2/fb-mysql-pv2-${BUILD_NUMBER}/g' fb-mysql-pv2.yaml"
                        sh "kubectl create -f fb-mysql-pv2.yaml -n dev --kubeconfig=${KUBECONFIG}"
                       
                       // find hostname of the slave pod and set as node selector for deployment and pod
                        /*PODNAME = sh (
                                script: 'hostname',
                                returnStdout: true
                            ).trim()
                        
                        NODENAME = sh (
                                script: 'kubectl -n dev get pod ' + PODNAME + ' -o jsonpath={.spec.nodeName} --kubeconfig=' + KUBECONFIG,
                                returnStdout: true
                            ).trim()
                            
                        sh "echo ${PODNAME} ------- ${NODENAME}"*/

                        sh "sed -i 's/fb-mysql-pv2/fb-mysql-pv2-${BUILD_NUMBER}/g' mysql-deployment.yaml"
                        sh "sed -i 's/{mysql}/mysql-${BUILD_NUMBER}/g' mysql-deployment.yaml"
                        //sh "sed -i 's/{hostname}/${NODENAME}/g' mysql-deployment.yaml"
                        sh "kubectl create -f mysql-deployment.yaml -n dev --kubeconfig=${KUBECONFIG}"
                        
                       // sh "sed -i 's/{hostname}/{NODENAME}/g' fb-mysql-service.yaml"
                        sh "sed -i 's/{service}/mysql-service-${BUILD_NUMBER}/g' fb-mysql-service.yaml"
                        sh "sed -i 's/{mysql}/mysql-${BUILD_NUMBER}/g' fb-mysql-service.yaml"
                        sh "kubectl create -f fb-mysql-service.yaml -n dev --kubeconfig=${KUBECONFIG}"
                        
                        
                        sh """
                        while ! mysqladmin ping --user=$databaseUsername --password=$databasePassword -h$databaseHost --port=3306 --silent; do
                        sleep 10
                        done
                        """
                    }
                 
                    dir ("Mysql-DVD-Store/ds3") {
                        //sleep(60)
                        sh "perl Install_DVDStore.pl"
                        //sh "perl CreateConfigFile.pl"
                    }
                    
                    dir ("Mysql-DVD-Store/ds3/mysqlds3") {
                        sh "sed -i 's/fb-mysql-service/mysql-service-${BUILD_NUMBER}/g' mysqlds3_create_all.sh"
                        sh "sh mysqlds3_create_all.sh"
                    }
                    
                    dir("Mysql-DVD-Store/k8s-files"){
                        sh "kubectl delete -f fb-mysql-service.yaml -n dev --kubeconfig=${KUBECONFIG}"
                        sh "kubectl delete -f mysql-deployment.yaml -n dev --kubeconfig=${KUBECONFIG}"
                        sh "kubectl delete -f fb-mysql-pv2.yaml -n dev --kubeconfig=${KUBECONFIG}"
                    }
                    
                }
                       
            }
    }
}
                
                
            
